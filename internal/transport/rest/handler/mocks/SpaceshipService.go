// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Je33/imperial_fleet/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// SpaceshipService is an autogenerated mock type for the SpaceshipService type
type SpaceshipService struct {
	mock.Mock
}

// CreateSpaceship provides a mock function with given fields: _a0, _a1
func (_m *SpaceshipService) CreateSpaceship(_a0 context.Context, _a1 *domain.Spaceship) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Spaceship) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSpaceship provides a mock function with given fields: _a0, _a1
func (_m *SpaceshipService) DeleteSpaceship(_a0 context.Context, _a1 *domain.Spaceship) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Spaceship) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0
func (_m *SpaceshipService) GetAll(_a0 context.Context) ([]*domain.Spaceship, error) {
	ret := _m.Called(_a0)

	var r0 []*domain.Spaceship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Spaceship, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Spaceship); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Spaceship)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *SpaceshipService) GetById(_a0 context.Context, _a1 uint) (*domain.Spaceship, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domain.Spaceship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*domain.Spaceship, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domain.Spaceship); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Spaceship)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSpaceship provides a mock function with given fields: _a0, _a1
func (_m *SpaceshipService) UpdateSpaceship(_a0 context.Context, _a1 *domain.Spaceship) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Spaceship) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSpaceshipService creates a new instance of SpaceshipService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpaceshipService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpaceshipService {
	mock := &SpaceshipService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
